import { Injectable, NgModule } from '@angular/core';
import { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';
import { Observable } from 'rxjs/Rx';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class BlobService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} params
     * @param {?} filename
     * @param {?=} useAzureStorageEmulator
     * @param {?=} azureStorageEmulatorBaseUrl
     * @return {?}
     */
    generateBlobUrl(params, filename, useAzureStorageEmulator = false, azureStorageEmulatorBaseUrl = '') {
        const /** @type {?} */ url = useAzureStorageEmulator ? azureStorageEmulatorBaseUrl : `https://${params.storageAccount}.blob.core.windows.net`;
        return `${url}/${params.containerName}/${filename}`;
    }
    /**
     * @param {?} reader
     * @param {?} state
     * @return {?}
     */
    uploadFileInBlocks(reader, state) {
        if (!state.cancelled) {
            if (state.totalBytesRemaining > 0) {
                const /** @type {?} */ fileContent = state.file.slice(state.currentFilePointer, state.currentFilePointer + state.maxBlockSize);
                const /** @type {?} */ blockId = state.blockIdPrefix + this.prependZeros(state.blockIds.length, 6);
                state.blockIds.push(btoa(blockId));
                reader.readAsArrayBuffer(fileContent);
                state.currentFilePointer += state.maxBlockSize;
                state.totalBytesRemaining -= state.maxBlockSize;
                if (state.totalBytesRemaining < state.maxBlockSize) {
                    state.maxBlockSize = state.totalBytesRemaining;
                }
            }
            else {
                this.commitBlockList(state);
            }
        }
    }
    /**
     * @param {?} state
     * @return {?}
     */
    commitBlockList(state) {
        const /** @type {?} */ uri = state.fileUrl + '&comp=blocklist';
        const /** @type {?} */ headers = new HttpHeaders({ 'x-ms-blob-content-type': state.file.type });
        let /** @type {?} */ requestBody = '<?xml version=\'1.0\' encoding=\'utf-8\'?><BlockList>';
        for (let /** @type {?} */ i = 0; i < state.blockIds.length; i++) {
            requestBody += '<Latest>' + state.blockIds[i] + '</Latest>';
        }
        requestBody += '</BlockList>';
        this.http.put(uri, requestBody, { headers: headers, responseType: 'text' })
            .subscribe(elem => {
            if (state.complete) {
                state.complete();
            }
        }, err => {
            console.log({ error: err });
        });
    }
    /**
     * @param {?} config
     * @return {?}
     */
    initializeState(config) {
        let /** @type {?} */ blockSize = BlobService.DefaultBlockSize;
        if (config.blockSize) {
            blockSize = config.blockSize;
        }
        let /** @type {?} */ maxBlockSize = blockSize;
        let /** @type {?} */ numberOfBlocks = 1;
        const /** @type {?} */ file = config.file;
        const /** @type {?} */ fileSize = file.size;
        if (fileSize < blockSize) {
            maxBlockSize = fileSize;
        }
        if (fileSize % maxBlockSize === 0) {
            numberOfBlocks = fileSize / maxBlockSize;
        }
        else {
            numberOfBlocks = fileSize / maxBlockSize + 1;
        }
        return {
            maxBlockSize: maxBlockSize,
            // Each file will be split in 256 KB.
            numberOfBlocks: numberOfBlocks,
            totalBytesRemaining: fileSize,
            currentFilePointer: 0,
            blockIds: new Array(),
            blockIdPrefix: 'block-',
            bytesUploaded: 0,
            submitUri: null,
            file: file,
            baseUrl: config.baseUrl,
            sasToken: config.sasToken,
            fileUrl: config.baseUrl + config.sasToken,
            progress: config.progress,
            complete: config.complete,
            error: config.error,
            cancelled: false
        };
    }
    /**
     * @param {?} config
     * @return {?}
     */
    upload(config) {
        const /** @type {?} */ state = this.initializeState(config);
        const /** @type {?} */ reader = new FileReader();
        reader.onloadend = (evt) => {
            if (evt.target.readyState === 2 && !state.cancelled) {
                const /** @type {?} */ uri = state.fileUrl + '&comp=block&blockid=' + state.blockIds[state.blockIds.length - 1];
                const /** @type {?} */ requestData = evt.target.result;
                const /** @type {?} */ requestData2 = new Uint8Array(evt.target.result);
                const /** @type {?} */ headers = new HttpHeaders({ 'x-ms-blob-type': 'BlockBlob', 'Content-Type': 'application/octet-stream' });
                this.http.put(uri, requestData, { headers: headers, responseType: 'text' })
                    .subscribe(elem => {
                    state.bytesUploaded += requestData2.length;
                    const /** @type {?} */ percentComplete = Math.round((state.bytesUploaded / state.file.size) * 1000) / 10;
                    if (state.progress) {
                        state.progress(percentComplete);
                    }
                    this.uploadFileInBlocks(reader, state);
                }, err => {
                    console.log({ error: err });
                });
            }
        };
        this.uploadFileInBlocks(reader, state);
        return {
            cancel: () => {
                state.cancelled = true;
            }
        };
    }
    /**
     * @param {?} number
     * @param {?} length
     * @return {?}
     */
    prependZeros(number, length) {
        let /** @type {?} */ str = '' + number;
        while (str.length < length) {
            str = '0' + str;
        }
        return str;
    }
    /**
     * @param {?} error
     * @param {?} cb
     * @return {?}
     */
    handleAngularJsonBug(error, cb) {
        const /** @type {?} */ JsonParseError = 'Http failure during parsing for';
        const /** @type {?} */ matches = error.message.match(new RegExp(JsonParseError, 'ig'));
        if ((error.status === 200 || error.status === 201) && matches.length === 1) {
            // return obs that completes
            // return obs that completes
            return Observable.empty();
        }
        else {
            cb();
            // return Observable.throw(error)		// re-throw
        }
    }
}
BlobService.DefaultBlockSize = 1024 * 32;
BlobService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
BlobService.ctorParameters = () => [
    { type: HttpClient, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class BlobModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: BlobModule,
            providers: [
                BlobService
            ]
        };
    }
}
BlobModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                declarations: [],
                exports: []
            },] },
];
/** @nocollapse */
BlobModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { BlobService, BlobModule };
//# sourceMappingURL=angular-azure-blob-service.js.map
